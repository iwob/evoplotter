import unittest
from src.stats.nonparametric import *


class TestsDims(unittest.TestCase):

    def test_Dim_mult0(self):
        data = np.array([[8.82, 11.8, 10.37, 12.08],
                         [8.92, 9.58, 10.59, 11.89],
                         [8.27, 11.46, 10.24, 11.6],
                         [8.83, 13.25, 8.33, 11.51]])
        res = runFriedmanPython_array(data)

        # Expected output:
#          0         1         2         3
# 0  1.000000  0.220908  0.823993  0.031375
# 1  0.220908  1.000000  0.670273  0.823993
# 2  0.823993  0.670273  1.000000  0.220908
# 3  0.031375  0.823993  0.220908  1.000000
        print("res.p_value\n", res.p_value)
        print("res.cmp_matrix\n", res.cmp_matrix)

        data_csv = """;A;B;C;D
b1;8.82;11.8;10.37;12.08
b2;8.92;9.58;10.59;11.89
b3;8.27;11.46;10.24;11.6
b4;8.83;13.25;8.33;11.51"""
        res2 = runFriedmanKK_csv(data_csv)
        print("res2.p_value\n", res2.p_value)
        print("res2.cmp_matrix\n", res2.cmp_matrix)


    def test_clearly_not_significant_difference(self):
        data = np.array([[8.0, 8.0, 8.0, 8.0],
                         [8.0, 8.0, 8.0, 8.0],
                         [8.0, 8.0, 8.0, 8.0],
                         [8.0, 8.0, 8.0, 8.0]])
        res = runFriedmanPython_array(data)
        print("res.p_value\n", res.p_value)
        print("res.cmp_matrix\n", res.cmp_matrix)


    def test_friedman_ecjStr(self):
        # taken from str.csv from ECJ paper
        data = np.array([[0.04,0.12,0.52,0.68,0.44,0.00,0.32,0.40,0.56,0.72,0.08,0.60,0.72,0.68,0.80,0.04,0.40,0.60,0.72,0.88],
                        [0.92,0.92,0.96,0.92,1.00,0.72,0.84,0.92,1.00,0.96,0.88,1.00,1.00,1.00,1.00,0.72,0.84,0.80,1.00,0.92],
                        [0.00,0.00,0.08,0.08,0.20,0.00,0.08,0.04,0.16,0.32,0.04,0.12,0.36,0.64,0.40,0.04,0.28,0.40,0.52,0.60],
                        [0.20,0.28,0.80,0.88,0.92,0.36,0.68,0.72,0.96,0.80,0.16,0.44,0.84,1.00,1.00,0.56,0.48,0.60,0.68,0.68],
                        [1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00],
                        [1.00,0.96,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.96,0.88,0.92,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00],
                        [0.92,1.00,1.00,1.00,1.00,0.96,0.96,0.88,0.96,0.92,0.84,0.96,0.96,1.00,1.00,0.96,0.96,1.00,1.00,1.00],
                        [0.88,0.96,0.96,1.00,1.00,0.40,0.96,0.92,1.00,1.00,0.76,0.96,1.00,0.92,1.00,0.92,0.92,0.96,1.00,1.00],
                        [1.00,0.96,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.96,1.00,1.00,1.00,1.00,1.00,1.00,1.00],
                        [0.96,0.92,1.00,1.00,1.00,0.96,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.96,1.00,1.00,1.00],
                        [0.76,0.72,0.84,0.96,0.96,0.60,0.80,1.00,1.00,1.00,0.92,0.88,1.00,1.00,1.00,0.92,0.84,0.96,1.00,1.00],
                        [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.04,0.00,0.00,0.00,0.16,0.12,0.24,0.20,0.00,0.20,0.16,0.24,0.04],
                        [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.12,0.08,0.12,0.00,0.20,0.24,0.20,0.20,0.00,0.08,0.12,0.40,0.16],
                        [0.59,0.60,0.70,0.73,0.73,0.54,0.66,0.70,0.75,0.75,0.58,0.71,0.78,0.82,0.82,0.63,0.69,0.74,0.81,0.79]])
        res = runFriedmanPython_array(data)
        # The p-value amounts to 3.5 * 10^âˆ’14 and so indicates significant differences.
        print("res.p_value\n", res.p_value)
        print("res.cmp_matrix\n", res.cmp_matrix)


    def test_wilcoxon_signed_rank(self):
        # Data taken from: https://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test#Example
        x = [125, 115, 130, 140, 140, 115, 140, 125, 140, 135]
        y = [110, 122, 125, 120, 140, 124, 123, 137, 135, 145]
        p_value = runWilcoxonSignedRank(x, y)
        # Expected p_value: 0.6113
        # Probably because of approximate method of computing, the obtained result is 0.5936305914425295
        # self.assertAlmostEqual(p_value, 0.6113)